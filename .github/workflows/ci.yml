name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  UV_VERSION: 0.4.18
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test and Lint
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          uv pip install -e ".[dev]"

      - name: Run ruff check
        run: uv run ruff check

      - name: Run ruff format check
        run: uv run ruff format --check

      - name: Run tests with coverage
        run: |
          uv run pytest --cov=src/email_assistant --cov-report=xml --cov-report=html --cov-report=term

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # Separate job for type checking
  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    continue-on-error: true # Allow type checking to fail during early development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          uv pip install -e ".[dev]"

      - name: Run mypy
        run: uv run mypy src/ --ignore-missing-imports

  # Separate job for building
  build:
    name: Build Package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}

      - name: Build package
        run: |
          uv build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/

  # Comment on PR with test results
  comment-results:
    name: Comment Test Results
    runs-on: ubuntu-latest
    needs: [test, type-check]
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write

    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const message = `## ‚úÖ CI Results

            All checks have passed! 

            - üß™ Tests: Passed
            - üé® Formatting: Passed
            - üîç Linting: Passed
            - üìä Coverage: Report uploaded
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
